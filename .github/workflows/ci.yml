name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Quality Checks
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile
        
    - name: Environment check
      run: |
        cd frontend
        cp env.example .env.local
        pnpm check:env:frontend
        
    - name: Type check
      run: |
        cd frontend
        pnpm typecheck
        
    - name: Lint
      run: |
        cd frontend
        pnpm lint
        
    - name: Format check
      run: |
        cd frontend
        pnpm format:check
        
    - name: Build
      run: |
        cd frontend
        pnpm build
        
    - name: Test
      run: |
        cd frontend
        pnpm test --coverage --watchAll=false
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Backend Quality Checks
  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Environment check
      run: |
        cd backend
        cp env.example .env
        python -c "from scripts.check_env import check_env; check_env()"
        
    - name: Environment setup
      run: |
        cd backend
        cp env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "SECRET_KEY=test-secret-key" >> .env.test
        
    - name: Run migrations
      run: |
        cd backend
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Type check
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
        
    - name: Lint
      run: |
        cd backend
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        isort --check-only app/
        
    - name: Test
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Shared Packages Quality
  packages-quality:
    name: Shared Packages Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        
    - name: Build packages
      run: |
        pnpm --filter @ai-email-campaign/types build
        pnpm --filter @ai-email-campaign/ui build
        
    - name: Type check packages
      run: |
        pnpm --filter @ai-email-campaign/types typecheck
        pnpm --filter @ai-email-campaign/ui typecheck

  # Security Checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Budgets
  performance:
    name: Performance Budgets
    runs-on: ubuntu-latest
    needs: [frontend-quality]
    
  # Load Testing
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [backend-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install k6
      run: |
        sudo apt-get update
        sudo apt-get install -y k6
        
    - name: Run load tests
      run: |
        k6 run scripts/load-tests/burst-sends.js
        k6 run scripts/load-tests/sustained-sends.js
        k6 run scripts/load-tests/webhook-fan-in.js
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile
        
    - name: Build for analysis
      run: |
        cd frontend
        pnpm build
        
    - name: Analyze bundle size
      run: |
        cd frontend
        pnpm analyze
        
    - name: Bundle size check
      run: |
        cd frontend
        pnpm build
        # Check if bundle size exceeds 500KB
        BUNDLE_SIZE=$(du -sb .next/static/chunks/ | awk '{sum+=$1} END {print sum}')
        if [ $BUNDLE_SIZE -gt 512000 ]; then
          echo "Bundle size ($BUNDLE_SIZE bytes) exceeds 500KB limit"
          exit 1
        fi
        echo "Bundle size: $BUNDLE_SIZE bytes (within limit)"
      continue-on-error: true

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        cd ../frontend
        pnpm install --frozen-lockfile
        
    - name: Environment setup
      run: |
        cd backend
        cp env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "SECRET_KEY=test-secret-key" >> .env.test
        
    - name: Run migrations
      run: |
        cd backend
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Start backend
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run integration tests
      run: |
        cd backend
        pytest tests/integration/ -v
        
    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/docs || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, integration]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging..."
        # Add your staging deployment logic here
        # This could be deploying to a staging server, Docker registry, etc.
